import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

def buildVersion = "2.0.0-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
group = "uk.gov.ida"
version = "$buildVersion"
archivesBaseName = "verify-event-emitter"

repositories {
    if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
        logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
        maven { url 'https://dl.bintray.com/alphagov/maven-test' }
        jcenter()
    }
    else {
        maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    intTest {
        java.srcDir 'src/intTest/java'
    }
}

dependencies {
    compile     'joda-time:joda-time:2.9.9',
                'com.google.inject:guice:4.0',
                'com.google.code.findbugs:jsr305:1.3.9',
                'com.amazonaws:aws-java-sdk-sqs:1.11.562',
                'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.8.10',
                'uk.gov.ida:dropwizard-logstash:1.3.12-72',
                'org.slf4j:slf4j-api:1.7.26'

    testCompile 'junit:junit:4.12',
                'uk.gov.ida:common-test-utils:2.0.0-44',
                'org.assertj:assertj-core:3.12.2',
                'org.mockito:mockito-core:2.27.0',
                'nl.jqno.equalsverifier:equalsverifier:2.4.7',
                'org.json:json:20180130'

    intTestCompile sourceSets.main.output,
                    sourceSets.test.output,
                    configurations.compile,
                    configurations.testCompile,
                    'cloud.localstack:localstack-utils:0.2.1'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
}

allprojects {
    task resolveDependencies {
        doLast {
            configurations.all { it.isCanBeResolved() && it.resolve() }
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

tasks.withType(Test) {
    testLogging {
        events  TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

nexusPublishing {
    useStaging = true
    repositories {
        sonatype {
            // because we registered in Sonatype after 24 Feb 2021, we provide these URIs
            // see: https://github.com/gradle-nexus/publish-plugin/blob/master/README.md
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}

signing {
    useInMemoryPgpKeys(
            System.getenv("MAVEN_CENTRAL_SIGNING_KEY"),
            System.getenv("MAVEN_CENTRAL_SIGNING_KEY_PASSWORD")
    )
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Verify Event Emitter'
                packaging = 'jar'
                description = 'Library providing a Java Service to log Audit Events to a datastore'
                url = 'https://github.com/alphagov/verify-event-emitter'
                artifactId = 'verify-event-emitter'

                scm {
                    url = 'https://github.com/alphagov/verify-event-emitter'
                    connection = 'scm:git:git://github.com/alphagov/verify-event-emitter.git'
                    developerConnection = 'scm:git:ssh://git@github.com:alphagov/verify-event-emitter.git'
                }

                licenses {
                    license {
                        name = 'MIT Licence'
                        url = 'https://github.com/alphagov/verify-event-emitter/blob/master/LICENCE'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'GDS Developers'
                    }
                }
            } // pom
        }
    }
}
